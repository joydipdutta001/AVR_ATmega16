
P9_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000003f2  00000466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba5  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bc  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057e  00000000  00000000  000017b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000467  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  7a:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_4bitdata>:
		lcd_4bitcmd(0x06);
		d++;
	} }

	lcd_4bitdata(int x) {
		lcd=(x&0xf0)+0x05;
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	2b 5f       	subi	r18, 0xFB	; 251
  88:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	e3 ef       	ldi	r30, 0xF3	; 243
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_4bitdata+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_4bitdata+0x12>
  94:	00 00       	nop
		_delay_ms(2);
		lcd=lcd-0x04;
  96:	22 b3       	in	r18, 0x12	; 18
  98:	24 50       	subi	r18, 0x04	; 4
  9a:	22 bb       	out	0x12, r18	; 18
		lcd=((x<<4)&0xf0)+0x05;
  9c:	82 95       	swap	r24
  9e:	92 95       	swap	r25
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	98 27       	eor	r25, r24
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	98 27       	eor	r25, r24
  a8:	8b 5f       	subi	r24, 0xFB	; 251
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	83 ef       	ldi	r24, 0xF3	; 243
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_4bitdata+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_4bitdata+0x34>
  b6:	00 00       	nop
		_delay_ms(2);
		lcd=lcd-0x04;
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	84 50       	subi	r24, 0x04	; 4
  bc:	82 bb       	out	0x12, r24	; 18
	}
  be:	08 95       	ret

000000c0 <lcd_4bitcmd>:

	lcd_4bitcmd(int x) {
		lcd=(x&0xf0)+0x04;
  c0:	28 2f       	mov	r18, r24
  c2:	20 7f       	andi	r18, 0xF0	; 240
  c4:	2c 5f       	subi	r18, 0xFC	; 252
  c6:	22 bb       	out	0x12, r18	; 18
  c8:	e3 ef       	ldi	r30, 0xF3	; 243
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_4bitcmd+0xc>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_4bitcmd+0x12>
  d2:	00 00       	nop
		_delay_ms(2);
		lcd=lcd-0x04;
  d4:	22 b3       	in	r18, 0x12	; 18
  d6:	24 50       	subi	r18, 0x04	; 4
  d8:	22 bb       	out	0x12, r18	; 18
		lcd=((x<<4)&0xf0)+0x04;
  da:	82 95       	swap	r24
  dc:	92 95       	swap	r25
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	98 27       	eor	r25, r24
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	98 27       	eor	r25, r24
  e6:	8c 5f       	subi	r24, 0xFC	; 252
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	83 ef       	ldi	r24, 0xF3	; 243
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_4bitcmd+0x2e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_4bitcmd+0x34>
  f4:	00 00       	nop
		_delay_ms(2);
		lcd=lcd-0x04;
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	84 50       	subi	r24, 0x04	; 4
  fa:	82 bb       	out	0x12, r24	; 18
	}
  fc:	08 95       	ret

000000fe <lcd_4bitinit>:
#include <util/delay.h>

#define lcd PORTD

lcd_4bitinit() {
	lcd_4bitcmd(0x02);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
	lcd_4bitcmd(0x28);
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
	lcd_4bitcmd(0x0c);
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
}
 116:	08 95       	ret

00000118 <lcd_4bitstr>:

lcd_4bitstr(char *str) {
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	8c 01       	movw	r16, r24
	int d=0;
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[d]!='\0')
 126:	08 c0       	rjmp	.+16     	; 0x138 <lcd_4bitstr+0x20>
	{
		lcd_4bitdata(str[d]);
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bitdata>
		lcd_4bitcmd(0x06);
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
		d++;
 136:	21 96       	adiw	r28, 0x01	; 1
	lcd_4bitcmd(0x0c);
}

lcd_4bitstr(char *str) {
	int d=0;
	while(str[d]!='\0')
 138:	f8 01       	movw	r30, r16
 13a:	ec 0f       	add	r30, r28
 13c:	fd 1f       	adc	r31, r29
 13e:	80 81       	ld	r24, Z
 140:	81 11       	cpse	r24, r1
 142:	f2 cf       	rjmp	.-28     	; 0x128 <lcd_4bitstr+0x10>
	{
		lcd_4bitdata(str[d]);
		lcd_4bitcmd(0x06);
		d++;
	} }
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <lcd_4bitnum>:
		lcd=((x<<4)&0xf0)+0x04;
		_delay_ms(2);
		lcd=lcd-0x04;
	}

	lcd_4bitnum(int n) {
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
		int d;
		if(n==0){lcd_4bitdata(48);}
 158:	89 2b       	or	r24, r25
 15a:	21 f4       	brne	.+8      	; 0x164 <lcd_4bitnum+0x16>
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bitdata>
		lcd_4bitcmd(0x04);
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
		while(n!=0)
 16c:	0c c0       	rjmp	.+24     	; 0x186 <lcd_4bitnum+0x38>
		{
			d=n%10;
 16e:	ce 01       	movw	r24, r28
 170:	6a e0       	ldi	r22, 0x0A	; 10
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	0e 94 cf 01 	call	0x39e	; 0x39e <__divmodhi4>
 178:	06 2f       	mov	r16, r22
 17a:	17 2f       	mov	r17, r23
			lcd_4bitdata(d+48);
 17c:	c0 96       	adiw	r24, 0x30	; 48
 17e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_4bitdata>
			n=n/10;
 182:	c0 2f       	mov	r28, r16
 184:	d1 2f       	mov	r29, r17

	lcd_4bitnum(int n) {
		int d;
		if(n==0){lcd_4bitdata(48);}
		lcd_4bitcmd(0x04);
		while(n!=0)
 186:	20 97       	sbiw	r28, 0x00	; 0
 188:	91 f7       	brne	.-28     	; 0x16e <lcd_4bitnum+0x20>
		{
			d=n%10;
			lcd_4bitdata(d+48);
			n=n/10;
		} }
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	08 95       	ret

00000194 <key>:

		int key()
		{
			while (1) {
				PORTB = 0b11011111; _delay_ms(20);
 194:	8f ed       	ldi	r24, 0xDF	; 223
 196:	88 bb       	out	0x18, r24	; 24
 198:	87 e8       	ldi	r24, 0x87	; 135
 19a:	93 e1       	ldi	r25, 0x13	; 19
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <key+0x8>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <key+0xe>
 1a2:	00 00       	nop
				
				if (PINA == 0xfe) { while (PINA == 0xfe); return  1;}
 1a4:	89 b3       	in	r24, 0x19	; 25
 1a6:	8e 3f       	cpi	r24, 0xFE	; 254
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <key+0x22>
 1aa:	89 b3       	in	r24, 0x19	; 25
 1ac:	8e 3f       	cpi	r24, 0xFE	; 254
 1ae:	e9 f3       	breq	.-6      	; 0x1aa <key+0x16>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret
				
				if (PINA == 0xfd) { while (PINA == 0xfd); return  4;}
 1b6:	89 b3       	in	r24, 0x19	; 25
 1b8:	8d 3f       	cpi	r24, 0xFD	; 253
 1ba:	31 f4       	brne	.+12     	; 0x1c8 <key+0x34>
 1bc:	89 b3       	in	r24, 0x19	; 25
 1be:	8d 3f       	cpi	r24, 0xFD	; 253
 1c0:	e9 f3       	breq	.-6      	; 0x1bc <key+0x28>
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret
				
				if (PINA == 0xfb) { while (PINA == 0xfb); return  7;}
 1c8:	89 b3       	in	r24, 0x19	; 25
 1ca:	8b 3f       	cpi	r24, 0xFB	; 251
 1cc:	31 f4       	brne	.+12     	; 0x1da <key+0x46>
 1ce:	89 b3       	in	r24, 0x19	; 25
 1d0:	8b 3f       	cpi	r24, 0xFB	; 251
 1d2:	e9 f3       	breq	.-6      	; 0x1ce <key+0x3a>
 1d4:	87 e0       	ldi	r24, 0x07	; 7
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret
				
				if (PINA == 0xf7) { while (PINA == 0xf7); return 10;}
 1da:	89 b3       	in	r24, 0x19	; 25
 1dc:	87 3f       	cpi	r24, 0xF7	; 247
 1de:	31 f4       	brne	.+12     	; 0x1ec <key+0x58>
 1e0:	89 b3       	in	r24, 0x19	; 25
 1e2:	87 3f       	cpi	r24, 0xF7	; 247
 1e4:	e9 f3       	breq	.-6      	; 0x1e0 <key+0x4c>
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	08 95       	ret
				
				PORTB = 0b10111111; _delay_ms(20);
 1ec:	8f eb       	ldi	r24, 0xBF	; 191
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	87 e8       	ldi	r24, 0x87	; 135
 1f2:	93 e1       	ldi	r25, 0x13	; 19
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <key+0x60>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <key+0x66>
 1fa:	00 00       	nop
				
				if (PINA == 0xfe) { while (PINA == 0xfe); return  2;}
 1fc:	89 b3       	in	r24, 0x19	; 25
 1fe:	8e 3f       	cpi	r24, 0xFE	; 254
 200:	31 f4       	brne	.+12     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 202:	89 b3       	in	r24, 0x19	; 25
 204:	8e 3f       	cpi	r24, 0xFE	; 254
 206:	e9 f3       	breq	.-6      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	08 95       	ret
				
				if (PINA == 0xfd) { while (PINA == 0xfd); return  5;}
 20e:	89 b3       	in	r24, 0x19	; 25
 210:	8d 3f       	cpi	r24, 0xFD	; 253
 212:	31 f4       	brne	.+12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 214:	89 b3       	in	r24, 0x19	; 25
 216:	8d 3f       	cpi	r24, 0xFD	; 253
 218:	e9 f3       	breq	.-6      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret
				
				if (PINA == 0xfb) { while (PINA == 0xfb); return  8;}
 220:	89 b3       	in	r24, 0x19	; 25
 222:	8b 3f       	cpi	r24, 0xFB	; 251
 224:	31 f4       	brne	.+12     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 226:	89 b3       	in	r24, 0x19	; 25
 228:	8b 3f       	cpi	r24, 0xFB	; 251
 22a:	e9 f3       	breq	.-6      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	08 95       	ret
				
				if (PINA == 0xf7) { while (PINA == 0xf7); return 11;}
 232:	89 b3       	in	r24, 0x19	; 25
 234:	87 3f       	cpi	r24, 0xF7	; 247
 236:	31 f4       	brne	.+12     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 238:	89 b3       	in	r24, 0x19	; 25
 23a:	87 3f       	cpi	r24, 0xF7	; 247
 23c:	e9 f3       	breq	.-6      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 23e:	8b e0       	ldi	r24, 0x0B	; 11
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
				
				PORTB = 0b01111111; _delay_ms(30);
 244:	8f e7       	ldi	r24, 0x7F	; 127
 246:	88 bb       	out	0x18, r24	; 24
 248:	8b e4       	ldi	r24, 0x4B	; 75
 24a:	9d e1       	ldi	r25, 0x1D	; 29
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 252:	00 00       	nop
				
				if (PINA == 0xfe) { while (PINA == 0xfe); return  3;}
 254:	89 b3       	in	r24, 0x19	; 25
 256:	8e 3f       	cpi	r24, 0xFE	; 254
 258:	31 f4       	brne	.+12     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 25a:	89 b3       	in	r24, 0x19	; 25
 25c:	8e 3f       	cpi	r24, 0xFE	; 254
 25e:	e9 f3       	breq	.-6      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	08 95       	ret
				
				if (PINA == 0xfd) { while (PINA == 0xfd); return  6;}
 266:	89 b3       	in	r24, 0x19	; 25
 268:	8d 3f       	cpi	r24, 0xFD	; 253
 26a:	31 f4       	brne	.+12     	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 26c:	89 b3       	in	r24, 0x19	; 25
 26e:	8d 3f       	cpi	r24, 0xFD	; 253
 270:	e9 f3       	breq	.-6      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret
				
				if (PINA == 0xfb) { while (PINA == 0xfb); return  9;}
 278:	89 b3       	in	r24, 0x19	; 25
 27a:	8b 3f       	cpi	r24, 0xFB	; 251
 27c:	31 f4       	brne	.+12     	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
 27e:	89 b3       	in	r24, 0x19	; 25
 280:	8b 3f       	cpi	r24, 0xFB	; 251
 282:	e9 f3       	breq	.-6      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
 284:	89 e0       	ldi	r24, 0x09	; 9
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret
				
				if (PINA == 0xf7) { while (PINA == 0xf7); return 12;}
 28a:	89 b3       	in	r24, 0x19	; 25
 28c:	87 3f       	cpi	r24, 0xF7	; 247
 28e:	09 f0       	breq	.+2      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 290:	81 cf       	rjmp	.-254    	; 0x194 <key>
 292:	89 b3       	in	r24, 0x19	; 25
 294:	87 3f       	cpi	r24, 0xF7	; 247
 296:	e9 f3       	breq	.-6      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	90 e0       	ldi	r25, 0x00	; 0
			} }
 29c:	08 95       	ret

0000029e <main>:

			int main(void)
			{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	2a 97       	sbiw	r28, 0x0a	; 10
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
				DDRC = DDRB = DDRD = 0xff;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	81 bb       	out	0x11, r24	; 17
 2b6:	87 bb       	out	0x17, r24	; 23
 2b8:	84 bb       	out	0x14, r24	; 20
				DDRA = 0xf0;
 2ba:	90 ef       	ldi	r25, 0xF0	; 240
 2bc:	9a bb       	out	0x1a, r25	; 26
				PORTA = 0xff;
 2be:	8b bb       	out	0x1b, r24	; 27
				
				int n[5] = {2,8,4,6,0};
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	e0 e6       	ldi	r30, 0x60	; 96
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	de 01       	movw	r26, r28
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	01 90       	ld	r0, Z+
 2cc:	0d 92       	st	X+, r0
 2ce:	8a 95       	dec	r24
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x2c>
				
				lcd_4bitinit();
 2d2:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_4bitinit>
				
				while(1)
				{	int a = key();
 2d6:	0e 94 ca 00 	call	0x194	; 0x194 <key>
 2da:	8c 01       	movw	r16, r24
					
					lcd_4bitcmd(0x01); _delay_ms(10);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
 2e4:	83 ec       	ldi	r24, 0xC3	; 195
 2e6:	99 e0       	ldi	r25, 0x09	; 9
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <main+0x4a>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x50>
 2ee:	00 00       	nop
					lcd_4bitcmd(0x83); _delay_ms(100);
 2f0:	83 e8       	ldi	r24, 0x83	; 131
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
 2f8:	87 ea       	ldi	r24, 0xA7	; 167
 2fa:	91 e6       	ldi	r25, 0x61	; 97
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x5e>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x64>
 302:	00 00       	nop
					lcd_4bitnum(a);
 304:	c8 01       	movw	r24, r16
 306:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_4bitnum>
					
					if (a == n[0])
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	08 17       	cp	r16, r24
 310:	19 07       	cpc	r17, r25
 312:	59 f4       	brne	.+22     	; 0x32a <main+0x8c>
					{	PORTC = 0b00001001;
 314:	89 e0       	ldi	r24, 0x09	; 9
 316:	85 bb       	out	0x15, r24	; 21
						lcd_4bitcmd(0xc3);
 318:	83 ec       	ldi	r24, 0xC3	; 195
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
					lcd_4bitstr(" Forward");	}
 320:	8a e6       	ldi	r24, 0x6A	; 106
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_4bitstr>
 328:	d6 cf       	rjmp	.-84     	; 0x2d6 <main+0x38>
					
					
					else if(a == n[1])
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	08 17       	cp	r16, r24
 330:	19 07       	cpc	r17, r25
 332:	59 f4       	brne	.+22     	; 0x34a <main+0xac>
					{	PORTC = 0b00000110;
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	85 bb       	out	0x15, r24	; 21
						lcd_4bitcmd(0xc3);
 338:	83 ec       	ldi	r24, 0xC3	; 195
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
					lcd_4bitstr(" Backward");	}
 340:	83 e7       	ldi	r24, 0x73	; 115
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_4bitstr>
 348:	c6 cf       	rjmp	.-116    	; 0x2d6 <main+0x38>
					
					else if(a == n[2])
 34a:	8d 81       	ldd	r24, Y+5	; 0x05
 34c:	9e 81       	ldd	r25, Y+6	; 0x06
 34e:	08 17       	cp	r16, r24
 350:	19 07       	cpc	r17, r25
 352:	59 f4       	brne	.+22     	; 0x36a <main+0xcc>
					{	PORTC = 0b00000001;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	85 bb       	out	0x15, r24	; 21
						lcd_4bitcmd(0xc3);
 358:	83 ec       	ldi	r24, 0xC3	; 195
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
					lcd_4bitstr(" Left");	}
 360:	8d e7       	ldi	r24, 0x7D	; 125
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_4bitstr>
 368:	b6 cf       	rjmp	.-148    	; 0x2d6 <main+0x38>
					
					else if(a == n[3])
 36a:	8f 81       	ldd	r24, Y+7	; 0x07
 36c:	98 85       	ldd	r25, Y+8	; 0x08
 36e:	08 17       	cp	r16, r24
 370:	19 07       	cpc	r17, r25
 372:	59 f4       	brne	.+22     	; 0x38a <main+0xec>
					{	PORTC = 0b00001000;
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	85 bb       	out	0x15, r24	; 21
						lcd_4bitcmd(0xc3);
 378:	83 ec       	ldi	r24, 0xC3	; 195
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
					lcd_4bitstr(" Right");	}
 380:	83 e8       	ldi	r24, 0x83	; 131
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_4bitstr>
 388:	a6 cf       	rjmp	.-180    	; 0x2d6 <main+0x38>
					
					else
					{	PORTC = 0b00000000;
 38a:	15 ba       	out	0x15, r1	; 21
						lcd_4bitcmd(0xc3);
 38c:	83 ec       	ldi	r24, 0xC3	; 195
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_4bitcmd>
					lcd_4bitstr(" Stop");	}
 394:	8a e8       	ldi	r24, 0x8A	; 138
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_4bitstr>
 39c:	9c cf       	rjmp	.-200    	; 0x2d6 <main+0x38>

0000039e <__divmodhi4>:
 39e:	97 fb       	bst	r25, 7
 3a0:	07 2e       	mov	r0, r23
 3a2:	16 f4       	brtc	.+4      	; 0x3a8 <__divmodhi4+0xa>
 3a4:	00 94       	com	r0
 3a6:	07 d0       	rcall	.+14     	; 0x3b6 <__divmodhi4_neg1>
 3a8:	77 fd       	sbrc	r23, 7
 3aa:	09 d0       	rcall	.+18     	; 0x3be <__divmodhi4_neg2>
 3ac:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__udivmodhi4>
 3b0:	07 fc       	sbrc	r0, 7
 3b2:	05 d0       	rcall	.+10     	; 0x3be <__divmodhi4_neg2>
 3b4:	3e f4       	brtc	.+14     	; 0x3c4 <__divmodhi4_exit>

000003b6 <__divmodhi4_neg1>:
 3b6:	90 95       	com	r25
 3b8:	81 95       	neg	r24
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	08 95       	ret

000003be <__divmodhi4_neg2>:
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255

000003c4 <__divmodhi4_exit>:
 3c4:	08 95       	ret

000003c6 <__udivmodhi4>:
 3c6:	aa 1b       	sub	r26, r26
 3c8:	bb 1b       	sub	r27, r27
 3ca:	51 e1       	ldi	r21, 0x11	; 17
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <__udivmodhi4_ep>

000003ce <__udivmodhi4_loop>:
 3ce:	aa 1f       	adc	r26, r26
 3d0:	bb 1f       	adc	r27, r27
 3d2:	a6 17       	cp	r26, r22
 3d4:	b7 07       	cpc	r27, r23
 3d6:	10 f0       	brcs	.+4      	; 0x3dc <__udivmodhi4_ep>
 3d8:	a6 1b       	sub	r26, r22
 3da:	b7 0b       	sbc	r27, r23

000003dc <__udivmodhi4_ep>:
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	5a 95       	dec	r21
 3e2:	a9 f7       	brne	.-22     	; 0x3ce <__udivmodhi4_loop>
 3e4:	80 95       	com	r24
 3e6:	90 95       	com	r25
 3e8:	bc 01       	movw	r22, r24
 3ea:	cd 01       	movw	r24, r26
 3ec:	08 95       	ret

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>
