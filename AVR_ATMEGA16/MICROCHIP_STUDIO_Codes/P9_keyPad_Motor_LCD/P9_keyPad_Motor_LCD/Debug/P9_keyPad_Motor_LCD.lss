
P9_keyPad_Motor_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000408  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf8  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006eb  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058e  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d1  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ea  00000000  00000000  0000226d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  7a:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
	lcd_cmd(0x28);
	lcd_cmd(0x0c);
}
lcd_cmd(int x)
{
	lcd=(x&0xf0)+0x04;
  82:	28 2f       	mov	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	2c 5f       	subi	r18, 0xFC	; 252
  88:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	e3 ef       	ldi	r30, 0xF3	; 243
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_cmd+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_cmd+0x12>
  94:	00 00       	nop
	_delay_ms(2);
	lcd=lcd-0x04;
  96:	22 b3       	in	r18, 0x12	; 18
  98:	24 50       	subi	r18, 0x04	; 4
  9a:	22 bb       	out	0x12, r18	; 18
	lcd=((x<<4)&0xf0)+0x04;
  9c:	82 95       	swap	r24
  9e:	92 95       	swap	r25
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	98 27       	eor	r25, r24
  a4:	80 7f       	andi	r24, 0xF0	; 240
  a6:	98 27       	eor	r25, r24
  a8:	8c 5f       	subi	r24, 0xFC	; 252
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	83 ef       	ldi	r24, 0xF3	; 243
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_cmd+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_cmd+0x34>
  b6:	00 00       	nop
	_delay_ms(2);
	lcd=lcd-0x04;
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	84 50       	subi	r24, 0x04	; 4
  bc:	82 bb       	out	0x12, r24	; 18
}
  be:	08 95       	ret

000000c0 <lcd_init>:

#define lcd PORTD

lcd_init()
{
	lcd_cmd(0x02);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0c);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
}
  d8:	08 95       	ret

000000da <lcd_data>:
	_delay_ms(2);
	lcd=lcd-0x04;
}
lcd_data(int x)
{
	lcd=(x&0xf0)+0x05;
  da:	28 2f       	mov	r18, r24
  dc:	20 7f       	andi	r18, 0xF0	; 240
  de:	2b 5f       	subi	r18, 0xFB	; 251
  e0:	22 bb       	out	0x12, r18	; 18
  e2:	e3 ef       	ldi	r30, 0xF3	; 243
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_data+0xc>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_data+0x12>
  ec:	00 00       	nop
	_delay_ms(2);
	lcd=lcd-0x04;
  ee:	22 b3       	in	r18, 0x12	; 18
  f0:	24 50       	subi	r18, 0x04	; 4
  f2:	22 bb       	out	0x12, r18	; 18
	lcd=((x<<4)&0xf0)+0x05;
  f4:	82 95       	swap	r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 27       	eor	r25, r24
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	98 27       	eor	r25, r24
 100:	8b 5f       	subi	r24, 0xFB	; 251
 102:	82 bb       	out	0x12, r24	; 18
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_data+0x2e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_data+0x34>
 10e:	00 00       	nop
	_delay_ms(2);
	lcd=lcd-0x04;
 110:	82 b3       	in	r24, 0x12	; 18
 112:	84 50       	subi	r24, 0x04	; 4
 114:	82 bb       	out	0x12, r24	; 18
}
 116:	08 95       	ret

00000118 <string_data>:
string_data(char *str){
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	8c 01       	movw	r16, r24
	int i = 0;
	for(i=0; i<=strlen(str) ; i++){
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	12 c0       	rjmp	.+36     	; 0x14c <string_data+0x34>
		lcd_data(str[i]);
 128:	f8 01       	movw	r30, r16
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	80 81       	ld	r24, Z
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 6d 00 	call	0xda	; 0xda <lcd_data>
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <string_data+0x22>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <string_data+0x28>
 140:	00 00       	nop
		_delay_ms(8);
		lcd_cmd(0x06);
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	_delay_ms(2);
	lcd=lcd-0x04;
}
string_data(char *str){
	int i = 0;
	for(i=0; i<=strlen(str) ; i++){
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	f8 01       	movw	r30, r16
 14e:	01 90       	ld	r0, Z+
 150:	00 20       	and	r0, r0
 152:	e9 f7       	brne	.-6      	; 0x14e <string_data+0x36>
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	e0 1b       	sub	r30, r16
 158:	f1 0b       	sbc	r31, r17
 15a:	ec 17       	cp	r30, r28
 15c:	fd 07       	cpc	r31, r29
 15e:	20 f7       	brcc	.-56     	; 0x128 <string_data+0x10>
		lcd_data(str[i]);
		_delay_ms(8);
		lcd_cmd(0x06);
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <number_data>:
char arr[11] = "0123456789";
number_data(int number){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	int i;
	if(number>0)
 16e:	18 16       	cp	r1, r24
 170:	19 06       	cpc	r1, r25
 172:	c4 f4       	brge	.+48     	; 0x1a4 <number_data+0x3a>
	{
		i=number%10;
 174:	6a e0       	ldi	r22, 0x0A	; 10
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divmodhi4>
 17c:	ec 01       	movw	r28, r24
		number=number/10;
		
		number_data(number);
 17e:	cb 01       	movw	r24, r22
 180:	0e 94 b5 00 	call	0x16a	; 0x16a <number_data>
		lcd_data(arr[i]);
 184:	c0 5a       	subi	r28, 0xA0	; 160
 186:	df 4f       	sbci	r29, 0xFF	; 255
 188:	88 81       	ld	r24, Y
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 6d 00 	call	0xda	; 0xda <lcd_data>
		lcd_cmd(0x06);
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 198:	83 ec       	ldi	r24, 0xC3	; 195
 19a:	99 e0       	ldi	r25, 0x09	; 9
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <number_data+0x32>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <number_data+0x38>
 1a2:	00 00       	nop
		_delay_ms(10);
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <key>:

int key()
{
	while (1) {
		PORTB = 0b11011111; _delay_ms(20);
 1aa:	8f ed       	ldi	r24, 0xDF	; 223
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	87 e8       	ldi	r24, 0x87	; 135
 1b0:	93 e1       	ldi	r25, 0x13	; 19
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <key+0x8>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <key+0xe>
 1b8:	00 00       	nop
		
		if (PINA == 0xfe) { while (PINA == 0xfe); return  1;}
 1ba:	89 b3       	in	r24, 0x19	; 25
 1bc:	8e 3f       	cpi	r24, 0xFE	; 254
 1be:	31 f4       	brne	.+12     	; 0x1cc <key+0x22>
 1c0:	89 b3       	in	r24, 0x19	; 25
 1c2:	8e 3f       	cpi	r24, 0xFE	; 254
 1c4:	e9 f3       	breq	.-6      	; 0x1c0 <key+0x16>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret
		
		if (PINA == 0xfd) { while (PINA == 0xfd); return  4;}
 1cc:	89 b3       	in	r24, 0x19	; 25
 1ce:	8d 3f       	cpi	r24, 0xFD	; 253
 1d0:	31 f4       	brne	.+12     	; 0x1de <key+0x34>
 1d2:	89 b3       	in	r24, 0x19	; 25
 1d4:	8d 3f       	cpi	r24, 0xFD	; 253
 1d6:	e9 f3       	breq	.-6      	; 0x1d2 <key+0x28>
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret
		
		if (PINA == 0xfb) { while (PINA == 0xfb); return  7;}
 1de:	89 b3       	in	r24, 0x19	; 25
 1e0:	8b 3f       	cpi	r24, 0xFB	; 251
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <key+0x46>
 1e4:	89 b3       	in	r24, 0x19	; 25
 1e6:	8b 3f       	cpi	r24, 0xFB	; 251
 1e8:	e9 f3       	breq	.-6      	; 0x1e4 <key+0x3a>
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret
		
		if (PINA == 0xf7) { while (PINA == 0xf7); return 10;}
 1f0:	89 b3       	in	r24, 0x19	; 25
 1f2:	87 3f       	cpi	r24, 0xF7	; 247
 1f4:	31 f4       	brne	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1f6:	89 b3       	in	r24, 0x19	; 25
 1f8:	87 3f       	cpi	r24, 0xF7	; 247
 1fa:	e9 f3       	breq	.-6      	; 0x1f6 <key+0x4c>
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret
		
		PORTB = 0b10111111; _delay_ms(20);
 202:	8f eb       	ldi	r24, 0xBF	; 191
 204:	88 bb       	out	0x18, r24	; 24
 206:	87 e8       	ldi	r24, 0x87	; 135
 208:	93 e1       	ldi	r25, 0x13	; 19
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 210:	00 00       	nop
		
		if (PINA == 0xfe) { while (PINA == 0xfe); return  2;}
 212:	89 b3       	in	r24, 0x19	; 25
 214:	8e 3f       	cpi	r24, 0xFE	; 254
 216:	31 f4       	brne	.+12     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 218:	89 b3       	in	r24, 0x19	; 25
 21a:	8e 3f       	cpi	r24, 0xFE	; 254
 21c:	e9 f3       	breq	.-6      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret
		
		if (PINA== 0xfd) { while (PINA == 0xfd); return  5;}
 224:	89 b3       	in	r24, 0x19	; 25
 226:	8d 3f       	cpi	r24, 0xFD	; 253
 228:	31 f4       	brne	.+12     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22a:	89 b3       	in	r24, 0x19	; 25
 22c:	8d 3f       	cpi	r24, 0xFD	; 253
 22e:	e9 f3       	breq	.-6      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	08 95       	ret
		
		if (PINA == 0xfb) { while (PINA == 0xfb); return  8;}
 236:	89 b3       	in	r24, 0x19	; 25
 238:	8b 3f       	cpi	r24, 0xFB	; 251
 23a:	31 f4       	brne	.+12     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 23c:	89 b3       	in	r24, 0x19	; 25
 23e:	8b 3f       	cpi	r24, 0xFB	; 251
 240:	e9 f3       	breq	.-6      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	08 95       	ret
		
		if (PINA == 0xf7) { while (PINA == 0xf7); return 11;}
 248:	89 b3       	in	r24, 0x19	; 25
 24a:	87 3f       	cpi	r24, 0xF7	; 247
 24c:	31 f4       	brne	.+12     	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 24e:	89 b3       	in	r24, 0x19	; 25
 250:	87 3f       	cpi	r24, 0xF7	; 247
 252:	e9 f3       	breq	.-6      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 254:	8b e0       	ldi	r24, 0x0B	; 11
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	08 95       	ret
		
		PORTB = 0b01111111; _delay_ms(30);
 25a:	8f e7       	ldi	r24, 0x7F	; 127
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	8b e4       	ldi	r24, 0x4B	; 75
 260:	9d e1       	ldi	r25, 0x1D	; 29
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 266:	00 c0       	rjmp	.+0      	; 0x268 <__EEPROM_REGION_LENGTH__+0x68>
 268:	00 00       	nop
		
		if (PINA == 0xfe) { while (PINA == 0xfe); return  3;}
 26a:	89 b3       	in	r24, 0x19	; 25
 26c:	8e 3f       	cpi	r24, 0xFE	; 254
 26e:	31 f4       	brne	.+12     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
 270:	89 b3       	in	r24, 0x19	; 25
 272:	8e 3f       	cpi	r24, 0xFE	; 254
 274:	e9 f3       	breq	.-6      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	08 95       	ret
		
		if (PINA == 0xfd) { while (PINA == 0xfd); return  6;}
 27c:	89 b3       	in	r24, 0x19	; 25
 27e:	8d 3f       	cpi	r24, 0xFD	; 253
 280:	31 f4       	brne	.+12     	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
 282:	89 b3       	in	r24, 0x19	; 25
 284:	8d 3f       	cpi	r24, 0xFD	; 253
 286:	e9 f3       	breq	.-6      	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	08 95       	ret
		
		if (PINA == 0xfb) { while (PINA == 0xfb); return  9;}
 28e:	89 b3       	in	r24, 0x19	; 25
 290:	8b 3f       	cpi	r24, 0xFB	; 251
 292:	31 f4       	brne	.+12     	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 294:	89 b3       	in	r24, 0x19	; 25
 296:	8b 3f       	cpi	r24, 0xFB	; 251
 298:	e9 f3       	breq	.-6      	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
 29a:	89 e0       	ldi	r24, 0x09	; 9
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret
		
		if (PINA == 0xf7) { while (PINA == 0xf7); return 12;}
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	87 3f       	cpi	r24, 0xF7	; 247
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2a6:	81 cf       	rjmp	.-254    	; 0x1aa <key>
 2a8:	89 b3       	in	r24, 0x19	; 25
 2aa:	87 3f       	cpi	r24, 0xF7	; 247
 2ac:	e9 f3       	breq	.-6      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	90 e0       	ldi	r25, 0x00	; 0
	} 
}
 2b2:	08 95       	ret

000002b4 <main>:


int main(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	2a 97       	sbiw	r28, 0x0a	; 10
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
    DDRC = DDRB = DDRD = 0xff;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	81 bb       	out	0x11, r24	; 17
 2cc:	87 bb       	out	0x17, r24	; 23
 2ce:	84 bb       	out	0x14, r24	; 20
    DDRA = 0xf0;
 2d0:	90 ef       	ldi	r25, 0xF0	; 240
 2d2:	9a bb       	out	0x1a, r25	; 26
    PORTA = 0xff;
 2d4:	8b bb       	out	0x1b, r24	; 27
	int n[5] = {2,8,4,6,0};
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	eb e6       	ldi	r30, 0x6B	; 107
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	de 01       	movw	r26, r28
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	01 90       	ld	r0, Z+
 2e2:	0d 92       	st	X+, r0
 2e4:	8a 95       	dec	r24
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x2c>
	lcd_init();
 2e8:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_init>
    while (1) 
    {
		int button = key();
 2ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <key>
 2f0:	8c 01       	movw	r16, r24
		lcd_cmd(0x01); _delay_ms(10);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 2fa:	83 ec       	ldi	r24, 0xC3	; 195
 2fc:	99 e0       	ldi	r25, 0x09	; 9
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <main+0x4a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <main+0x50>
 304:	00 00       	nop
		lcd_cmd(0x83); _delay_ms(100);
 306:	83 e8       	ldi	r24, 0x83	; 131
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 30e:	87 ea       	ldi	r24, 0xA7	; 167
 310:	91 e6       	ldi	r25, 0x61	; 97
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x5e>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x64>
 318:	00 00       	nop
		number_data(button);
 31a:	c8 01       	movw	r24, r16
 31c:	0e 94 b5 00 	call	0x16a	; 0x16a <number_data>
		if (button == n[0])
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	08 17       	cp	r16, r24
 326:	19 07       	cpc	r17, r25
 328:	59 f4       	brne	.+22     	; 0x340 <main+0x8c>
		{
			PORTC = 0b00001001;
 32a:	89 e0       	ldi	r24, 0x09	; 9
 32c:	85 bb       	out	0x15, r24	; 21
			lcd_cmd(0xc3);
 32e:	83 ec       	ldi	r24, 0xC3	; 195
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			string_data(" Forward");
 336:	85 e7       	ldi	r24, 0x75	; 117
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 8c 00 	call	0x118	; 0x118 <string_data>
 33e:	d6 cf       	rjmp	.-84     	; 0x2ec <main+0x38>
		}else if (button== n[1])
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	9c 81       	ldd	r25, Y+4	; 0x04
 344:	08 17       	cp	r16, r24
 346:	19 07       	cpc	r17, r25
 348:	59 f4       	brne	.+22     	; 0x360 <main+0xac>
		{
			PORTC = 0b00000110;
 34a:	86 e0       	ldi	r24, 0x06	; 6
 34c:	85 bb       	out	0x15, r24	; 21
			lcd_cmd(0xc3);
 34e:	83 ec       	ldi	r24, 0xC3	; 195
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			string_data(" Backward");
 356:	8e e7       	ldi	r24, 0x7E	; 126
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 8c 00 	call	0x118	; 0x118 <string_data>
 35e:	c6 cf       	rjmp	.-116    	; 0x2ec <main+0x38>
		}else if (button == n[2])
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	9e 81       	ldd	r25, Y+6	; 0x06
 364:	08 17       	cp	r16, r24
 366:	19 07       	cpc	r17, r25
 368:	59 f4       	brne	.+22     	; 0x380 <main+0xcc>
		{
			PORTC = 0b00000001;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	85 bb       	out	0x15, r24	; 21
			lcd_cmd(0xc3);
 36e:	83 ec       	ldi	r24, 0xC3	; 195
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			string_data(" Left");
 376:	88 e8       	ldi	r24, 0x88	; 136
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 8c 00 	call	0x118	; 0x118 <string_data>
 37e:	b6 cf       	rjmp	.-148    	; 0x2ec <main+0x38>
		}else if (button == n[3])
 380:	8f 81       	ldd	r24, Y+7	; 0x07
 382:	98 85       	ldd	r25, Y+8	; 0x08
 384:	08 17       	cp	r16, r24
 386:	19 07       	cpc	r17, r25
 388:	59 f4       	brne	.+22     	; 0x3a0 <main+0xec>
		{
			PORTC = 0b00001000;
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	85 bb       	out	0x15, r24	; 21
			lcd_cmd(0xc3);
 38e:	83 ec       	ldi	r24, 0xC3	; 195
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			string_data(" Right");
 396:	8e e8       	ldi	r24, 0x8E	; 142
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 8c 00 	call	0x118	; 0x118 <string_data>
 39e:	a6 cf       	rjmp	.-180    	; 0x2ec <main+0x38>
		}else
		{
			PORTC = 0b00000000;
 3a0:	15 ba       	out	0x15, r1	; 21
			lcd_cmd(0xc3);
 3a2:	83 ec       	ldi	r24, 0xC3	; 195
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
			string_data(" Stop");
 3aa:	85 e9       	ldi	r24, 0x95	; 149
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 8c 00 	call	0x118	; 0x118 <string_data>
 3b2:	9c cf       	rjmp	.-200    	; 0x2ec <main+0x38>

000003b4 <__divmodhi4>:
 3b4:	97 fb       	bst	r25, 7
 3b6:	07 2e       	mov	r0, r23
 3b8:	16 f4       	brtc	.+4      	; 0x3be <__divmodhi4+0xa>
 3ba:	00 94       	com	r0
 3bc:	07 d0       	rcall	.+14     	; 0x3cc <__divmodhi4_neg1>
 3be:	77 fd       	sbrc	r23, 7
 3c0:	09 d0       	rcall	.+18     	; 0x3d4 <__divmodhi4_neg2>
 3c2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__udivmodhi4>
 3c6:	07 fc       	sbrc	r0, 7
 3c8:	05 d0       	rcall	.+10     	; 0x3d4 <__divmodhi4_neg2>
 3ca:	3e f4       	brtc	.+14     	; 0x3da <__divmodhi4_exit>

000003cc <__divmodhi4_neg1>:
 3cc:	90 95       	com	r25
 3ce:	81 95       	neg	r24
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	08 95       	ret

000003d4 <__divmodhi4_neg2>:
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255

000003da <__divmodhi4_exit>:
 3da:	08 95       	ret

000003dc <__udivmodhi4>:
 3dc:	aa 1b       	sub	r26, r26
 3de:	bb 1b       	sub	r27, r27
 3e0:	51 e1       	ldi	r21, 0x11	; 17
 3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <__udivmodhi4_ep>

000003e4 <__udivmodhi4_loop>:
 3e4:	aa 1f       	adc	r26, r26
 3e6:	bb 1f       	adc	r27, r27
 3e8:	a6 17       	cp	r26, r22
 3ea:	b7 07       	cpc	r27, r23
 3ec:	10 f0       	brcs	.+4      	; 0x3f2 <__udivmodhi4_ep>
 3ee:	a6 1b       	sub	r26, r22
 3f0:	b7 0b       	sbc	r27, r23

000003f2 <__udivmodhi4_ep>:
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	5a 95       	dec	r21
 3f8:	a9 f7       	brne	.-22     	; 0x3e4 <__udivmodhi4_loop>
 3fa:	80 95       	com	r24
 3fc:	90 95       	com	r25
 3fe:	bc 01       	movw	r22, r24
 400:	cd 01       	movw	r24, r26
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
